CATEGORIES
declaration;
type;
statement;
expression;

NODES

program -> declaration*;

structDeclaration:declaration -> ID:string variableDeclaration*;

variableDeclaration:declaration -> ID:string type;

functionDeclaration:declaration -> ID:string parameters:variableDeclaration* type variableDeclaration* statement*;

print:statement -> expression*;
printsp:statement -> expression*;
println:statement -> expression*;
read:statement -> expression;
if:statement -> expression s1:statement* s2:statement*;
while:statement -> expression statement*;
return:statement -> expression?;
asignacion:statement -> e1:expression a:expression*;
funcionLlamada:statement -> ID:string expression*;

cast:expression -> targetType:type expression;
structAccess:expression -> expression ID:string;
arrayAccess:expression -> e1:expression e2:expression;
expresionLlamada:expression -> ID:string expression*;
not:expression -> expression;
expresionAritmetica:expression -> e1:expression op:string e2:expression;
expresionLogica:expression -> e1:expression op:string e2:expression;
variable:expression -> ID:string;
litEnt:expression -> LITENT:string;
litReal:expression -> LITREAL:string;
litChar:expression -> CHAR_LITERAL:string;

intType:type -> ;
realType:type -> ;
charType:type -> ;
voidType:type -> ;
arrayType:type -> posicion:string type;
structType:type -> nombre:string;


// -----------------------
ATTRIBUTE GRAMMAR Identification
variable -> variableDeclaration;
funcionLlamada -> functionDeclaration;
expresionLlamada -> functionDeclaration;
structType -> structDeclaration;

// -----------------------
ATTRIBUTE GRAMMAR TypeChecking
expression -> type;
expression -> lvalue:boolean;
statement -> [inh] funcion:functionDeclaration;

// -----------------------
ATTRIBUTE GRAMMAR MemoryAllocation
variableDeclaration -> [inh] address:int;    // Inherited attribute

// -----------------------
CODE SPECIFICATION Mapl
run[program]
define[declaration]
execute[statement]
value[expression]
address[expression]