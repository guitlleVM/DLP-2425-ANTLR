' Generated with VGen 2.0.0

@startuml

class Position {
    +int getLine()
    +int getColumn()
    +boolean lessThan(Position other)
    +boolean greaterThan(Position other)
}

interface AST {
    +updatePositions(Object... children)
    +updatePositions(Position start, Position end)
    +Object accept(Visitor visitor, Object param)
}

AST *-[#404040,thickness=1]- Position : start >
AST *-[#404040,thickness=1]- Position : end >


interface Declaration {
}
AST <|-[#808080]- Declaration
abstract AbstractDeclaration
Declaration <|-[#808080]- AbstractDeclaration
AbstractAST <|-[#808080]- AbstractDeclaration

interface Type {
}
AST <|-[#808080]- Type
abstract AbstractType
Type <|-[#808080]- AbstractType
AbstractAST <|-[#808080]- AbstractType

interface Statement {
}
AST <|-[#808080]- Statement
abstract AbstractStatement
Statement <|-[#808080]- AbstractStatement
AbstractAST <|-[#808080]- AbstractStatement
Statement -[#3366cc,thickness=3]-  FunctionDeclaration #text:3366cc : funcion >

interface Expression {
	..<color:#3366cc> TypeChecking </color>..
	+<color:#3366cc>boolean lvalue</color>
}
AST <|-[#808080]- Expression
abstract AbstractExpression
Expression <|-[#808080]- AbstractExpression
AbstractAST <|-[#808080]- AbstractExpression
Expression -[#3366cc,thickness=3]-  Type #text:3366cc : type >

interface AST {
}
abstract AbstractAST
AST <|-[#808080]- AbstractAST

class Program {
}
AbstractAST <|-[#808080]- Program
Program o-[#404040,thickness=2]- "✱" Declaration : declarations >

class StructDeclaration {
	+String ID
}
AbstractDeclaration <|-[#808080]- StructDeclaration
StructDeclaration o-[#404040,thickness=2]- "✱" VariableDeclaration : variableDeclarations >

class VariableDeclaration {
	+String ID
}
AbstractDeclaration <|-[#808080]- VariableDeclaration
VariableDeclaration o-[#404040,thickness=2]-  Type : type >

class FunctionDeclaration {
	+String ID
}
AbstractDeclaration <|-[#808080]- FunctionDeclaration
FunctionDeclaration o-[#404040,thickness=2]- "✱" VariableDeclaration : parameters >
FunctionDeclaration o-[#404040,thickness=2]-  Type : type >
FunctionDeclaration o-[#404040,thickness=2]- "✱" VariableDeclaration : variableDeclarations >
FunctionDeclaration o-[#404040,thickness=2]- "✱" Statement : statements >

class Print {
}
AbstractStatement <|-[#808080]- Print
Print o-[#404040,thickness=2]- "✱" Expression : expressions >

class Printsp {
}
AbstractStatement <|-[#808080]- Printsp
Printsp o-[#404040,thickness=2]- "✱" Expression : expressions >

class Println {
}
AbstractStatement <|-[#808080]- Println
Println o-[#404040,thickness=2]- "✱" Expression : expressions >

class Read {
}
AbstractStatement <|-[#808080]- Read
Read o-[#404040,thickness=2]-  Expression : expression >

class If {
}
AbstractStatement <|-[#808080]- If
If o-[#404040,thickness=2]-  Expression : expression >
If o-[#404040,thickness=2]- "✱" Statement : s1 >
If o-[#404040,thickness=2]- "✱" Statement : s2 >

class While {
}
AbstractStatement <|-[#808080]- While
While o-[#404040,thickness=2]-  Expression : expression >
While o-[#404040,thickness=2]- "✱" Statement : statements >

class Return {
}
AbstractStatement <|-[#808080]- Return
Return o-[#404040,thickness=2]- "0..1" Expression : expression >

class Asignacion {
}
AbstractStatement <|-[#808080]- Asignacion
Asignacion o-[#404040,thickness=2]-  Expression : e1 >
Asignacion o-[#404040,thickness=2]-  Expression : e2 >

class FuncionLlamada {
	+String ID
}
AbstractStatement <|-[#808080]- FuncionLlamada
FuncionLlamada o-[#404040,thickness=2]- "✱" Expression : expressions >
FuncionLlamada -[#ff6600,thickness=3]-  FunctionDeclaration #text:ff6600 : functionDeclaration >

class Cast {
}
AbstractExpression <|-[#808080]- Cast
Cast o-[#404040,thickness=2]-  Type : targetType >
Cast o-[#404040,thickness=2]-  Expression : expression >

class StructAccess {
	+String ID
}
AbstractExpression <|-[#808080]- StructAccess
StructAccess o-[#404040,thickness=2]-  Expression : expression >

class ArrayAccess {
}
AbstractExpression <|-[#808080]- ArrayAccess
ArrayAccess o-[#404040,thickness=2]-  Expression : e1 >
ArrayAccess o-[#404040,thickness=2]-  Expression : e2 >

class ExpresionLlamada {
	+String ID
}
AbstractExpression <|-[#808080]- ExpresionLlamada
ExpresionLlamada o-[#404040,thickness=2]- "✱" Expression : expressions >
ExpresionLlamada -[#ff6600,thickness=3]-  FunctionDeclaration #text:ff6600 : functionDeclaration >

class Not {
}
AbstractExpression <|-[#808080]- Not
Not o-[#404040,thickness=2]-  Expression : expression >

class ExpresionAritmetica {
	+String op
}
AbstractExpression <|-[#808080]- ExpresionAritmetica
ExpresionAritmetica o-[#404040,thickness=2]-  Expression : e1 >
ExpresionAritmetica o-[#404040,thickness=2]-  Expression : e2 >

class ExpresionLogica {
	+String op
}
AbstractExpression <|-[#808080]- ExpresionLogica
ExpresionLogica o-[#404040,thickness=2]-  Expression : e1 >
ExpresionLogica o-[#404040,thickness=2]-  Expression : e2 >

class Variable {
	+String ID
}
AbstractExpression <|-[#808080]- Variable
Variable -[#ff6600,thickness=3]-  VariableDeclaration #text:ff6600 : variableDeclaration >

class LitEnt {
	+String LITENT
}
AbstractExpression <|-[#808080]- LitEnt

class LitReal {
	+String LITREAL
}
AbstractExpression <|-[#808080]- LitReal

class LitChar {
	+String CHAR_LITERAL
}
AbstractExpression <|-[#808080]- LitChar

class IntType {
}
AbstractType <|-[#808080]- IntType

class RealType {
}
AbstractType <|-[#808080]- RealType

class CharType {
}
AbstractType <|-[#808080]- CharType

class VoidType {
}
AbstractType <|-[#808080]- VoidType

class ArrayType {
	+String posicion
}
AbstractType <|-[#808080]- ArrayType
ArrayType o-[#404040,thickness=2]-  Type : type >

class StructType {
	+String nombre
}
AbstractType <|-[#808080]- StructType
StructType -[#ff6600,thickness=3]-  StructDeclaration #text:ff6600 : structDeclaration >

@enduml
